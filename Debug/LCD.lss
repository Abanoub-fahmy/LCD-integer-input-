
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f9e  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000791  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000079f  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049c  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000952  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003586  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  64:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDir>:
		case DIO_PORTC :
		PORTC = Vlaue;
		break;
		
		case DIO_PORTD :
		PORTD = Vlaue;
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPinDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPinDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPinDir+0xe0>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPinDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPinDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDir+0x5c>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPinDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPinDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPinDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPinDir+0xca>
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_SetPinValue>:


void DIO_SetPinValue(uint8 Port , uint8 Pin , uint8 Value)
{
	
	switch (Value)
 14e:	44 23       	and	r20, r20
 150:	b9 f1       	breq	.+110    	; 0x1c0 <DIO_SetPinValue+0x72>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <DIO_SetPinValue+0xa>
 156:	6b c0       	rjmp	.+214    	; 0x22e <DIO_SetPinValue+0xe0>
	{
		case  DIO_PIN_HIGH :
		
		switch (Port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	89 f0       	breq	.+34     	; 0x17e <DIO_SetPinValue+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinValue+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	c9 f0       	breq	.+50     	; 0x194 <DIO_SetPinValue+0x46>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	11 f1       	breq	.+68     	; 0x1aa <DIO_SetPinValue+0x5c>
 166:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , Pin);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinValue+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinValue+0x22>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
			break;
 17c:	08 95       	ret
			
			case DIO_PORTB :
			SET_BIT(PORTB , Pin);
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinValue+0x3c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinValue+0x38>
 18e:	82 2b       	or	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
			break;
 192:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(PORTC , Pin);
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinValue+0x52>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinValue+0x4e>
 1a4:	82 2b       	or	r24, r18
 1a6:	85 bb       	out	0x15, r24	; 21
			break;
 1a8:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(PORTD , Pin);
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinValue+0x68>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinValue+0x64>
 1ba:	82 2b       	or	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
			break;
 1be:	08 95       	ret
		break;
		
		
		case  DIO_PIN_LOW :
		
		switch (Port)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_SetPinValue+0x9a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_SetPinValue+0x82>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_SetPinValue+0xb2>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_SetPinValue+0xca>
 1ce:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , Pin);
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinValue+0x8e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinValue+0x8a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
			break;
 1e6:	08 95       	ret
			
			case DIO_PORTB :
			CLR_BIT(PORTB , Pin);
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinValue+0xa6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinValue+0xa2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
			break;
 1fe:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(PORTC , Pin);
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0xba>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	85 bb       	out	0x15, r24	; 21
			break;
 216:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(PORTD , Pin);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0xd6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0xd2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <LCD_WriteCommand>:
	while(str[cnt] !='\0')
	{
		LCD_WriteChar(str[cnt]);
		cnt++;
	}
}
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	9c 2f       	mov	r25, r28
 256:	90 7f       	andi	r25, 0xF0	; 240
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	89 2b       	or	r24, r25
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	81 ee       	ldi	r24, 0xE1	; 225
 26c:	94 e0       	ldi	r25, 0x04	; 4
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <LCD_WriteCommand+0x3e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_WriteCommand+0x48>
 278:	00 00       	nop
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 284:	20 e1       	ldi	r18, 0x10	; 16
 286:	c2 9f       	mul	r28, r18
 288:	c0 01       	movw	r24, r0
 28a:	11 24       	eor	r1, r1
 28c:	9b b3       	in	r25, 0x1b	; 27
 28e:	9f 70       	andi	r25, 0x0F	; 15
 290:	89 2b       	or	r24, r25
 292:	8b bb       	out	0x1b, r24	; 27
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	63 e0       	ldi	r22, 0x03	; 3
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	91 ee       	ldi	r25, 0xE1	; 225
 2a2:	24 e0       	ldi	r18, 0x04	; 4
 2a4:	81 50       	subi	r24, 0x01	; 1
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	20 40       	sbci	r18, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <LCD_WriteCommand+0x74>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_WriteCommand+0x7e>
 2ae:	00 00       	nop
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 2ba:	8f e1       	ldi	r24, 0x1F	; 31
 2bc:	9e e4       	ldi	r25, 0x4E	; 78
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_WriteCommand+0x8e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_WriteCommand+0x94>
 2c4:	00 00       	nop
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_Intit>:
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	66 e0       	ldi	r22, 0x06	; 6
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	67 e0       	ldi	r22, 0x07	; 7
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	81 ee       	ldi	r24, 0xE1	; 225
 314:	94 e0       	ldi	r25, 0x04	; 4
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <LCD_Intit+0x4c>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_Intit+0x56>
 320:	00 00       	nop
 322:	83 e3       	ldi	r24, 0x33	; 51
 324:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
 328:	82 e3       	ldi	r24, 0x32	; 50
 32a:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
 32e:	88 e2       	ldi	r24, 0x28	; 40
 330:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
 334:	8c e0       	ldi	r24, 0x0C	; 12
 336:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
 34c:	08 95       	ret

0000034e <LCD_WriteChar>:
 34e:	cf 93       	push	r28
 350:	c8 2f       	mov	r28, r24
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 370:	8b b3       	in	r24, 0x1b	; 27
 372:	9c 2f       	mov	r25, r28
 374:	90 7f       	andi	r25, 0xF0	; 240
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	89 2b       	or	r24, r25
 37a:	8b bb       	out	0x1b, r24	; 27
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 386:	8f e9       	ldi	r24, 0x9F	; 159
 388:	9f e0       	ldi	r25, 0x0F	; 15
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_WriteChar+0x3c>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_WriteChar+0x42>
 390:	00 00       	nop
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 39c:	20 e1       	ldi	r18, 0x10	; 16
 39e:	c2 9f       	mul	r28, r18
 3a0:	c0 01       	movw	r24, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	9b b3       	in	r25, 0x1b	; 27
 3a6:	9f 70       	andi	r25, 0x0F	; 15
 3a8:	89 2b       	or	r24, r25
 3aa:	8b bb       	out	0x1b, r24	; 27
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9c e9       	ldi	r25, 0x9C	; 156
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_WriteChar+0x6c>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_WriteChar+0x72>
 3c0:	00 00       	nop
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 3cc:	8f e1       	ldi	r24, 0x1F	; 31
 3ce:	9e e4       	ldi	r25, 0x4E	; 78
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_WriteChar+0x82>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_WriteChar+0x88>
 3d6:	00 00       	nop
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <LCD_WriteInteger>:
	
	void LCD_WriteInteger(sint32  num)
	{
 3dc:	8f 92       	push	r8
 3de:	9f 92       	push	r9
 3e0:	af 92       	push	r10
 3e2:	bf 92       	push	r11
 3e4:	cf 92       	push	r12
 3e6:	df 92       	push	r13
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	6b 01       	movw	r12, r22
 3fa:	7c 01       	movw	r14, r24
  {
	  LCD_WriteChar(0x30+digit[j-1]);
	  j--;
  }
		
		}
 3fc:	8d b6       	in	r8, 0x3d	; 61
 3fe:	9e b6       	in	r9, 0x3e	; 62
}
	
	void LCD_WriteInteger(sint32  num)
	{
		uint8 j=0;
		sint32 num0 = num;
 400:	9b 01       	movw	r18, r22
 402:	ac 01       	movw	r20, r24
	}
}
	
	void LCD_WriteInteger(sint32  num)
	{
		uint8 j=0;
 404:	10 e0       	ldi	r17, 0x00	; 0
		sint32 num0 = num;
		// detect number of digits for input integer
		while (num0 !=0)
 406:	09 c0       	rjmp	.+18     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			num0=num0/10;
 408:	ca 01       	movw	r24, r20
 40a:	b9 01       	movw	r22, r18
 40c:	2a e0       	ldi	r18, 0x0A	; 10
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__divmodsi4>
			j++;
 418:	1f 5f       	subi	r17, 0xFF	; 255
	void LCD_WriteInteger(sint32  num)
	{
		uint8 j=0;
		sint32 num0 = num;
		// detect number of digits for input integer
		while (num0 !=0)
 41a:	21 15       	cp	r18, r1
 41c:	31 05       	cpc	r19, r1
 41e:	41 05       	cpc	r20, r1
 420:	51 05       	cpc	r21, r1
 422:	91 f7       	brne	.-28     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			num0=num0/10;
			j++;
		}
		uint8 digit[j];
 424:	8d b7       	in	r24, 0x3d	; 61
 426:	9e b7       	in	r25, 0x3e	; 62
 428:	81 1b       	sub	r24, r17
 42a:	91 09       	sbc	r25, r1
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	9e bf       	out	0x3e, r25	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	8d bf       	out	0x3d, r24	; 61
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	5c 01       	movw	r10, r24
		uint8 i=0;
 43a:	00 e0       	ldi	r16, 0x00	; 0
		// convert input integer to individual digits and put them in array
        while(num !=0)
 43c:	11 c0       	rjmp	.+34     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
   {
	    digit[i]=num%10;
 43e:	c7 01       	movw	r24, r14
 440:	b6 01       	movw	r22, r12
 442:	2a e0       	ldi	r18, 0x0A	; 10
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__divmodsi4>
 44e:	f5 01       	movw	r30, r10
 450:	e0 0f       	add	r30, r16
 452:	f1 1d       	adc	r31, r1
 454:	60 83       	st	Z, r22
	    num=num/10;
 456:	c2 2e       	mov	r12, r18
 458:	d3 2e       	mov	r13, r19
 45a:	e4 2e       	mov	r14, r20
 45c:	f5 2e       	mov	r15, r21
	    i++;
 45e:	0f 5f       	subi	r16, 0xFF	; 255
			j++;
		}
		uint8 digit[j];
		uint8 i=0;
		// convert input integer to individual digits and put them in array
        while(num !=0)
 460:	c1 14       	cp	r12, r1
 462:	d1 04       	cpc	r13, r1
 464:	e1 04       	cpc	r14, r1
 466:	f1 04       	cpc	r15, r1
 468:	51 f7       	brne	.-44     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 46a:	0a c0       	rjmp	.+20     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
	    i++;
    }
	    // print ASCII number code + every singel digit 
        while(j>0)
  {
	  LCD_WriteChar(0x30+digit[j-1]);
 46c:	e1 2f       	mov	r30, r17
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	ea 0d       	add	r30, r10
 474:	fb 1d       	adc	r31, r11
 476:	80 81       	ld	r24, Z
 478:	80 5d       	subi	r24, 0xD0	; 208
 47a:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_WriteChar>
	  j--;
 47e:	11 50       	subi	r17, 0x01	; 1
	    digit[i]=num%10;
	    num=num/10;
	    i++;
    }
	    // print ASCII number code + every singel digit 
        while(j>0)
 480:	11 11       	cpse	r17, r1
 482:	f4 cf       	rjmp	.-24     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
  {
	  LCD_WriteChar(0x30+digit[j-1]);
	  j--;
  }
		
		}
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	9e be       	out	0x3e, r9	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	8d be       	out	0x3d, r8	; 61
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	08 95       	ret

000004a8 <LCD_GoToLocation>:

	void LCD_GoToLocation(uint8 row , uint8 col)
	{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <LCD_GoToLocation+0x6>
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
		uint8 Loc[2] = {0x80 , 0xc0};
 4b2:	90 e8       	ldi	r25, 0x80	; 128
 4b4:	99 83       	std	Y+1, r25	; 0x01
 4b6:	90 ec       	ldi	r25, 0xC0	; 192
 4b8:	9a 83       	std	Y+2, r25	; 0x02
		
		LCD_WriteCommand(Loc[row]+col);
 4ba:	e1 e0       	ldi	r30, 0x01	; 1
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	ec 0f       	add	r30, r28
 4c0:	fd 1f       	adc	r31, r29
 4c2:	e8 0f       	add	r30, r24
 4c4:	f1 1d       	adc	r31, r1
 4c6:	80 81       	ld	r24, Z
 4c8:	86 0f       	add	r24, r22
 4ca:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteCommand>
	}
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <main>:


int main(void)
{
    /* Replace with your application code */
    LCD_Intit();
 4d8:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Intit>
    LCD_GoToLocation(0,6);
 4dc:	66 e0       	ldi	r22, 0x06	; 6
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_GoToLocation>
	LCD_WriteInteger(1255);
 4e4:	67 ee       	ldi	r22, 0xE7	; 231
 4e6:	74 e0       	ldi	r23, 0x04	; 4
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WriteInteger>

	
	
	
	
}
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	08 95       	ret

000004f6 <__divmodsi4>:
 4f6:	05 2e       	mov	r0, r21
 4f8:	97 fb       	bst	r25, 7
 4fa:	1e f4       	brtc	.+6      	; 0x502 <__divmodsi4+0xc>
 4fc:	00 94       	com	r0
 4fe:	0e 94 92 02 	call	0x524	; 0x524 <__negsi2>
 502:	57 fd       	sbrc	r21, 7
 504:	07 d0       	rcall	.+14     	; 0x514 <__divmodsi4_neg2>
 506:	0e 94 9a 02 	call	0x534	; 0x534 <__udivmodsi4>
 50a:	07 fc       	sbrc	r0, 7
 50c:	03 d0       	rcall	.+6      	; 0x514 <__divmodsi4_neg2>
 50e:	4e f4       	brtc	.+18     	; 0x522 <__divmodsi4_exit>
 510:	0c 94 92 02 	jmp	0x524	; 0x524 <__negsi2>

00000514 <__divmodsi4_neg2>:
 514:	50 95       	com	r21
 516:	40 95       	com	r20
 518:	30 95       	com	r19
 51a:	21 95       	neg	r18
 51c:	3f 4f       	sbci	r19, 0xFF	; 255
 51e:	4f 4f       	sbci	r20, 0xFF	; 255
 520:	5f 4f       	sbci	r21, 0xFF	; 255

00000522 <__divmodsi4_exit>:
 522:	08 95       	ret

00000524 <__negsi2>:
 524:	90 95       	com	r25
 526:	80 95       	com	r24
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__udivmodsi4>:
 534:	a1 e2       	ldi	r26, 0x21	; 33
 536:	1a 2e       	mov	r1, r26
 538:	aa 1b       	sub	r26, r26
 53a:	bb 1b       	sub	r27, r27
 53c:	fd 01       	movw	r30, r26
 53e:	0d c0       	rjmp	.+26     	; 0x55a <__udivmodsi4_ep>

00000540 <__udivmodsi4_loop>:
 540:	aa 1f       	adc	r26, r26
 542:	bb 1f       	adc	r27, r27
 544:	ee 1f       	adc	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	a2 17       	cp	r26, r18
 54a:	b3 07       	cpc	r27, r19
 54c:	e4 07       	cpc	r30, r20
 54e:	f5 07       	cpc	r31, r21
 550:	20 f0       	brcs	.+8      	; 0x55a <__udivmodsi4_ep>
 552:	a2 1b       	sub	r26, r18
 554:	b3 0b       	sbc	r27, r19
 556:	e4 0b       	sbc	r30, r20
 558:	f5 0b       	sbc	r31, r21

0000055a <__udivmodsi4_ep>:
 55a:	66 1f       	adc	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	1a 94       	dec	r1
 564:	69 f7       	brne	.-38     	; 0x540 <__udivmodsi4_loop>
 566:	60 95       	com	r22
 568:	70 95       	com	r23
 56a:	80 95       	com	r24
 56c:	90 95       	com	r25
 56e:	9b 01       	movw	r18, r22
 570:	ac 01       	movw	r20, r24
 572:	bd 01       	movw	r22, r26
 574:	cf 01       	movw	r24, r30
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
